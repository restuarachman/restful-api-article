// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "tech-test/internal/article/dto"

	mock "github.com/stretchr/testify/mock"
)

// ArticleUsecase is an autogenerated mock type for the ArticleUsecase type
type ArticleUsecase struct {
	mock.Mock
}

// GetArticles provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ArticleUsecase) GetArticles(_a0 string, _a1 string, _a2 int, _a3 int) ([]dto.ArticleResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []dto.ArticleResponse
	if rf, ok := ret.Get(0).(func(string, string, int, int) []dto.ArticleResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ArticleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0
func (_m *ArticleUsecase) Store(_a0 dto.ArticleRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.ArticleRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewArticleUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticleUsecase creates a new instance of ArticleUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleUsecase(t mockConstructorTestingTNewArticleUsecase) *ArticleUsecase {
	mock := &ArticleUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
